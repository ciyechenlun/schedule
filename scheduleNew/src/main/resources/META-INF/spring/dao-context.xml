<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">
	
	<!-- 数据源配置 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${druid.pool.driverClassName}" />

		<!-- 基本属性 url-user-password -->
		<property name="url" value="${druid.pool.url}" />
		<property name="username" value="${druid.pool.username}" />
		<property name="password" value="${druid.pool.password}" />

		<!-- 配置初始化大小-最小-最大 -->
		<property name="initialSize" value="${druid.pool.initialSize}" />
		<property name="minIdle" value="${druid.pool.minIdle}" />
		<property name="maxActive" value="${druid.pool.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${druid.pool.maxWait}" />

		<property name="testWhileIdle" value="${druid.pool.testWhileIdle}" />
		<property name="validationQuery" value="SELECT 'x'" />

		<!-- 配置间隔多久才进行一次检测,检测需要关闭的空闲连接,单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${druid.pool.timeBetweenEvictionRunsMillis}" />

		<!-- 配置一个连接在池中最小生存的时间,单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${druid.pool.minEvictableIdleTimeMillis}" />

		<!--
		<property name="passwordCallback">
			<bean class="com.cmcc.zysoft.spring.security.support.ProductionPasswordCallback" />
		</property>
		-->
	</bean>
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="namedParameterJdbcTemplateExt" class="com.starit.common.dao.jdbc.NamedParameterJdbcTemplateExt">
		<constructor-arg ref="dataSource" />
	</bean>
	
	<!-- 对任何带有@Repository 注解的对象自动激活其数据访问异常转换 -->
    <bean id="persistenceManager" class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" >
    	<property name="proxyTargetClass" value="true" />
   	</bean>
    
    <bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" lazy-init="true" />
    
	<!-- 配置sessionFactory, 注意这里引入的包的不同  -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="lobHandler" ref="lobHandler" />
		<property name="packagesToScan">
			<list> 
				<value>com.cmcc.zysoft.schedule.model</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.use_sql_comments">${hibernate.use_sql_comments}</prop>
				<!-- 处理数据库连接池长时间无法释放导致连接池超过最大连接数的问题 -->
				<prop key="hibernate.connection.release_mode">${hibernate.connection.release_mode}</prop>
			</props>
		</property>
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">   
  		<property name="sessionFactory">   
   			<ref bean="sessionFactory" />   
  		</property>   
 	</bean>
 	
 	<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
 		<property name="transactionManager" ref="transactionManager" />
 	</bean>
 	
 	<!-- 
 		 配置事务的传播特性 
 		使用全注解事务，在dao层方法上使用@Transactional
 	 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
</beans>
